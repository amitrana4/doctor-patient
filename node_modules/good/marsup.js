'use strict';

const Stream = require('stream');
const dataStream = new Stream.Readable({ objectMode: true });
const Pumpify = require('pumpify');

dataStream._read = () => {};

dataStream.once('end', () => {
  console.log('read stream end');
});

class RandomID extends Stream.Transform {
  constructor(options) {
    super({ objectMode: true });
  }
  _transform(chunk, encoding, callback) {
    chunk.id = Math.floor(Math.random() * 10000);
    chunk.i = chunk.id;
    callback(null, chunk);
  }
}

class Stringify extends Stream.Transform {
  constructor(options) {
    super({ objectMode: true });
  }
  _transform(chunk, encoding, callback) {
    callback(null, JSON.stringify(chunk) + '\n');
  }
}



dataStream.pipe(Pumpify.obj([new RandomID(), new Stringify(), process.stdout]));
dataStream.pipe(Pumpify.obj([new RandomID(), new Stringify(), process.stdout]));

for (var i = 0; i < 10; i++) {
  dataStream.push({i});
}

dataStream.push(null);
